class WebRTCSFUClient {
    constructor() {
        this.pc = null;
        this.ws = null;
        this.localStream = null;
        this.remoteStreams = new Map();
        this.connectionStartTime = null;
        this.isVideoEnabled = true;
        this.isAudioEnabled = true;

        // DOM —ç–ª–µ–º–µ–Ω—Ç—ã
        this.elements = {
            joinBtn: document.getElementById('joinBtn'),
            leaveBtn: document.getElementById('leaveBtn'),
            toggleVideo: document.getElementById('toggleVideo'),
            toggleAudio: document.getElementById('toggleAudio'),
            localVideo: document.getElementById('localVideo'),
            remoteVideos: document.getElementById('remoteVideos'),
            noParticipants: document.getElementById('noParticipants'),
            connectionStatus: document.getElementById('connectionStatus'),
            participantCount: document.getElementById('participantCount'),
            logContainer: document.getElementById('logContainer'),
            clearLogsBtn: document.getElementById('clearLogsBtn'),
            showStatsBtn: document.getElementById('showStatsBtn'),
            statsPanel: document.getElementById('statsPanel'),
            toggleStats: document.getElementById('toggleStats'),
            connectionState: document.getElementById('connectionState'),
            iceState: document.getElementById('iceState'),
            connectionTime: document.getElementById('connectionTime'),
            localAudioStatus: document.getElementById('localAudioStatus'),
            localVideoStatus: document.getElementById('localVideoStatus')
        };

        this.initializeEventListeners();
        this.log('–ö–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω', 'info');
    }

    initializeEventListeners() {
        this.elements.joinBtn.addEventListener('click', () => this.connect());
        this.elements.leaveBtn.addEventListener('click', () => this.disconnect());
        this.elements.toggleVideo.addEventListener('click', () => this.toggleVideo());
        this.elements.toggleAudio.addEventListener('click', () => this.toggleAudio());
        this.elements.clearLogsBtn.addEventListener('click', () => this.clearLogs());
        this.elements.showStatsBtn.addEventListener('click', () => this.toggleStatsPanel());
        this.elements.toggleStats.addEventListener('click', () => this.toggleStatsPanel());

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.addEventListener('beforeunload', () => {
            this.disconnect();
        });
    }

    async connect() {
        try {
            this.log('–ù–∞—á–∞–ª–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...', 'info');
            this.updateConnectionStatus('connecting', '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');

            await this.initializePeerConnection();
            await this.getUserMedia();
            await this.connectWebSocket();

            this.connectionStartTime = Date.now();
            this.updateUI('connected');

        } catch (error) {
            this.log(`–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`, 'error');
            this.updateConnectionStatus('error', '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
            this.updateUI('disconnected');
        }
    }

    async initializePeerConnection() {
        this.pc = new RTCPeerConnection({
            iceServers: [
                { urls: 'stun:stun.l.google.com:19302' },
                { urls: 'stun:stun1.l.google.com:19302' }
            ]
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        this.pc.addEventListener('track', (event) => this.handleRemoteTrack(event));
        this.pc.addEventListener('icecandidate', (event) => this.handleIceCandidate(event));
        this.pc.addEventListener('connectionstatechange', () => this.handleConnectionStateChange());
        this.pc.addEventListener('iceconnectionstatechange', () => this.handleIceStateChange());

        this.log('PeerConnection —Å–æ–∑–¥–∞–Ω', 'success');
    }

    async getUserMedia() {
        try {
            this.localStream = await navigator.mediaDevices.getUserMedia({
                video: { width: 640, height: 480 },
                audio: true
            });

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–æ–≤ –≤ PeerConnection
            this.localStream.getTracks().forEach(track => {
                this.pc.addTrack(track, this.localStream);
            });

            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –≤–∏–¥–µ–æ
            this.elements.localVideo.srcObject = this.localStream;

            this.log('–ú–µ–¥–∏–∞–ø–æ—Ç–æ–∫ –ø–æ–ª—É—á–µ–Ω', 'success');
            this.updateMediaStatus();

        } catch (error) {
            throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∫–∞–º–µ—Ä–µ/–º–∏–∫—Ä–æ—Ñ–æ–Ω—É: ${error.message}`);
        }
    }

    async connectWebSocket() {
        return new Promise((resolve, reject) => {
            const wsUrl = `ws://${window.location.host}/websocket`;
            this.ws = new WebSocket(wsUrl);

            this.ws.onopen = () => {
                this.log('WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω', 'success');
                this.updateConnectionStatus('connected', '–ü–æ–¥–∫–ª—é—á–µ–Ω');
                resolve();
            };

            this.ws.onmessage = (event) => this.handleWebSocketMessage(event);

            this.ws.onerror = (error) => {
                this.log('–û—à–∏–±–∫–∞ WebSocket', 'error');
                reject(new Error('WebSocket connection failed'));
            };

            this.ws.onclose = () => {
                this.log('WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ', 'warning');
                this.updateConnectionStatus('offline', '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
            };

            // –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            setTimeout(() => {
                if (this.ws.readyState !== WebSocket.OPEN) {
                    reject(new Error('WebSocket connection timeout'));
                }
            }, 5000);
        });
    }

    async handleWebSocketMessage(event) {
        try {
            const message = JSON.parse(event.data);

            switch (message.event) {
                case 'offer':
                    await this.handleOffer(JSON.parse(message.data));
                    break;
                case 'candidate':
                    await this.handleRemoteCandidate(JSON.parse(message.data));
                    break;
                default:
                    this.log(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${message.event}`, 'warning');
            }
        } catch (error) {
            this.log(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`, 'error');
        }
    }

    async handleOffer(offer) {
        try {
            await this.pc.setRemoteDescription(offer);
            const answer = await this.pc.createAnswer();
            await this.pc.setLocalDescription(answer);

            this.sendWebSocketMessage('answer', JSON.stringify(answer));
            this.log('–û—Ç–ø—Ä–∞–≤–ª–µ–Ω answer', 'info');

        } catch (error) {
            this.log(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ offer: ${error.message}`, 'error');
        }
    }

    async handleRemoteCandidate(candidate) {
        try {
            await this.pc.addIceCandidate(candidate);
        } catch (error) {
            this.log(`–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ICE –∫–∞–Ω–¥–∏–¥–∞—Ç–∞: ${error.message}`, 'error');
        }
    }

    handleIceCandidate(event) {
        if (event.candidate && this.ws && this.ws.readyState === WebSocket.OPEN) {
            this.sendWebSocketMessage('candidate', JSON.stringify(event.candidate));
        }
    }

    handleRemoteTrack(event) {
        const [stream] = event.streams;
        const track = event.track;

        if (track.kind === 'video') {
            this.addRemoteVideo(stream, track.id);
            this.log(`–ü–æ–ª—É—á–µ–Ω —É–¥–∞–ª–µ–Ω–Ω—ã–π –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫: ${track.id}`, 'success');
        }

        this.updateParticipantCount();
    }

    addRemoteVideo(stream, trackId) {
        // –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –≤–∏–¥–µ–æ —Å —Ç–∞–∫–∏–º ID
        this.removeRemoteVideo(trackId);

        const videoWrapper = document.createElement('div');
        videoWrapper.className = 'video-wrapper remote';
        videoWrapper.id = `remote-${trackId}`;

        const video = document.createElement('video');
        video.srcObject = stream;
        video.autoplay = true;
        video.playsinline = true;

        const overlay = document.createElement('div');
        overlay.className = 'video-overlay';
        overlay.innerHTML = `
            <span class="video-label">–£—á–∞—Å—Ç–Ω–∏–∫</span>
            <div class="video-controls">
                <span class="connection-quality">üì∂</span>
            </div>
        `;

        videoWrapper.appendChild(video);
        videoWrapper.appendChild(overlay);
        this.elements.remoteVideos.appendChild(videoWrapper);

        this.remoteStreams.set(trackId, { stream, video, wrapper: videoWrapper });
        this.updateRemoteVideosVisibility();
    }

    removeRemoteVideo(trackId) {
        const existing = document.getElementById(`remote-${trackId}`);
        if (existing) {
            existing.remove();
        }
        this.remoteStreams.delete(trackId);
        this.updateRemoteVideosVisibility();
        this.updateParticipantCount();
    }

    updateRemoteVideosVisibility() {
        const hasRemoteVideos = this.remoteStreams.size > 0;
        this.elements.noParticipants.style.display = hasRemoteVideos ? 'none' : 'flex';
    }

    updateParticipantCount() {
        const count = this.remoteStreams.size;
        this.elements.participantCount.textContent = count;
    }

    handleConnectionStateChange() {
        const state = this.pc.connectionState;
        this.elements.connectionState.textContent = state;
        this.log(`–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${state}`, 'info');

        if (state === 'failed' || state === 'closed') {
            this.updateConnectionStatus('error', '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ');
        }
    }

    handleIceStateChange() {
        const state = this.pc.iceConnectionState;
        this.elements.iceState.textContent = state;
        this.log(`ICE —Å–æ—Å—Ç–æ—è–Ω–∏–µ: ${state}`, 'info');
    }

    async toggleVideo() {
        if (!this.localStream) return;

        const videoTrack = this.localStream.getVideoTracks()[0];
        if (videoTrack) {
            this.isVideoEnabled = !this.isVideoEnabled;
            videoTrack.enabled = this.isVideoEnabled;
            this.updateMediaControls();
            this.updateMediaStatus();

            this.log(`–í–∏–¥–µ–æ ${this.isVideoEnabled ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}`, 'info');
        }
    }

    async toggleAudio() {
        if (!this.localStream) return;

        const audioTrack = this.localStream.getAudioTracks()[0];
        if (audioTrack) {
            this.isAudioEnabled = !this.isAudioEnabled;
            audioTrack.enabled = this.isAudioEnabled;
            this.updateMediaControls();
            this.updateMediaStatus();

            this.log(`–ê—É–¥–∏–æ ${this.isAudioEnabled ? '–≤–∫–ª—é—á–µ–Ω–æ' : '–≤—ã–∫–ª—é—á–µ–Ω–æ'}`, 'info');
        }
    }

    updateMediaControls() {
        this.elements.toggleVideo.classList.toggle('disabled', !this.isVideoEnabled);
        this.elements.toggleAudio.classList.toggle('disabled', !this.isAudioEnabled);

        const videoIcon = this.elements.toggleVideo.querySelector('.btn-icon');
        const audioIcon = this.elements.toggleAudio.querySelector('.btn-icon');

        videoIcon.textContent = this.isVideoEnabled ? 'üìπ' : 'üìπ‚ùå';
        audioIcon.textContent = this.isAudioEnabled ? 'üé§' : 'üé§‚ùå';
    }

    updateMediaStatus() {
        this.elements.localVideoStatus.textContent = this.isVideoEnabled ? 'üìπ' : 'üìπ‚ùå';
        this.elements.localAudioStatus.textContent = this.isAudioEnabled ? 'üé§' : 'üé§‚ùå';
    }

    disconnect() {
        this.log('–û—Ç–∫–ª—é—á–µ–Ω–∏–µ...', 'info');

        // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –º–µ–¥–∏–∞–ø–æ—Ç–æ–∫–∞
        if (this.localStream) {
            this.localStream.getTracks().forEach(track => track.stop());
            this.localStream = null;
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ PeerConnection
        if (this.pc) {
            this.pc.close();
            this.pc = null;
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ WebSocket
        if (this.ws) {
            this.ws.close();
            this.ws = null;
        }

        // –û—á–∏—Å—Ç–∫–∞ UI
        this.elements.localVideo.srcObject = null;
        this.elements.remoteVideos.innerHTML = '';
        this.remoteStreams.clear();

        this.updateUI('disconnected');
        this.updateConnectionStatus('offline', '–ù–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        this.updateParticipantCount();
        this.updateRemoteVideosVisibility();

        this.log('–û—Ç–∫–ª—é—á–µ–Ω', 'info');
    }

    updateUI(state) {
        const isConnected = state === 'connected';
        const isConnecting = state === 'connecting';

        this.elements.joinBtn.disabled = isConnected || isConnecting;
        this.elements.leaveBtn.disabled = !isConnected;
        this.elements.toggleVideo.disabled = !isConnected;
        this.elements.toggleAudio.disabled = !isConnected;

        if (isConnecting) {
            this.elements.joinBtn.innerHTML = '<span class="btn-icon">‚è≥</span>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...';
        } else {
            this.elements.joinBtn.innerHTML = '<span class="btn-icon">üîó</span>–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è';
        }
    }

    updateConnectionStatus(status, text) {
        this.elements.connectionStatus.className = `status-indicator ${status}`;
        this.elements.connectionStatus.textContent = text;

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if (status === 'connected' && this.connectionStartTime) {
            this.updateConnectionTime();
        }
    }

    updateConnectionTime() {
        if (!this.connectionStartTime) return;

        const elapsed = Math.floor((Date.now() - this.connectionStartTime) / 1000);
        const minutes = Math.floor(elapsed / 60);
        const seconds = elapsed % 60;

        this.elements.connectionTime.textContent =
            `${minutes}:${seconds.toString().padStart(2, '0')}`;
    }

    sendWebSocketMessage(event, data) {
        if (this.ws && this.ws.readyState === WebSocket.OPEN) {
            this.ws.send(JSON.stringify({ event, data }));
        }
    }

    log(message, level = 'info') {
        const timestamp = new Date().toLocaleTimeString();
        const logEntry = document.createElement('div');
        logEntry.className = `log-entry ${level}`;
        logEntry.innerHTML = `
            <span class="log-time">${timestamp}</span>
            <span class="log-message">${message}</span>
        `;

        this.elements.logContainer.appendChild(logEntry);
        this.elements.logContainer.scrollTop = this.elements.logContainer.scrollHeight;

        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ª–æ–≥–æ–≤
        const logs = this.elements.logContainer.children;
        if (logs.length > 100) {
            logs[0].remove();
        }

        console.log(`[${level.toUpperCase()}] ${message}`);
    }

    clearLogs() {
        this.elements.logContainer.innerHTML = '';
        this.log('–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã', 'info');
    }

    toggleStatsPanel() {
        this.elements.statsPanel.classList.toggle('hidden');

        if (!this.elements.statsPanel.classList.contains('hidden')) {
            this.updateStats();
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
            this.statsInterval = setInterval(() => this.updateStats(), 2000);
        } else if (this.statsInterval) {
            clearInterval(this.statsInterval);
        }
    }

    updateStats() {
        if (this.pc) {
            this.elements.connectionState.textContent = this.pc.connectionState;
            this.elements.iceState.textContent = this.pc.iceConnectionState;

            if (this.connectionStartTime) {
                this.updateConnectionTime();
            }
        }
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    window.sfuClient = new WebRTCSFUClient();

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    setInterval(() => {
        if (window.sfuClient.connectionStartTime) {
            window.sfuClient.updateConnectionTime();
        }
    }, 1000);
});
